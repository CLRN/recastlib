Index: Include/DetourNavMeshQuery.h
===================================================================
--- Include/DetourNavMeshQuery.h	(revision 338)
+++ Include/DetourNavMeshQuery.h	(working copy)
@@ -37,10 +37,16 @@
 	float m_areaCost[DT_MAX_AREAS];		///< Cost per area type. (Used by default implementation.)
 	unsigned short m_includeFlags;		///< Flags for polygons that can be visited. (Used by default implementation.)
 	unsigned short m_excludeFlags;		///< Flags for polygons that should not be visted. (Used by default implementation.)
-	
+
 public:
 	dtQueryFilter();
-	
+
+#ifdef DT_VIRTUAL_QUERYFILTER
+	virtual ~dtQueryFilter();
+#else
+	~dtQueryFilter();
+#endif
+
 	/// Returns true if the polygon can be visited.  (I.e. Is traversable.)
 	///  @param[in]		ref		The reference id of the polygon test.
 	///  @param[in]		tile	The tile containing the polygon.
@@ -86,12 +92,19 @@
 	/// Returns the traversal cost of the area.
 	///  @param[in]		i		The id of the area.
 	/// @returns The traversal cost of the area.
-	inline float getAreaCost(const int i) const { return m_areaCost[i]; }
+	inline float getAreaCost(const int i) const {
+		if (i >= 0 && i < DT_MAX_AREAS)
+			return m_areaCost[i];
+		return 0.0f;
+	}
 
 	/// Sets the traversal cost of the area.
 	///  @param[in]		i		The id of the area.
 	///  @param[in]		cost	The new cost of traversing the area.
-	inline void setAreaCost(const int i, const float cost) { m_areaCost[i] = cost; } 
+	inline void setAreaCost(const int i, const float cost) {
+		if (i >= 0 && i < DT_MAX_AREAS)
+			m_areaCost[i] = cost;
+	} 
 
 	/// Returns the include flags for the filter.
 	/// Any polygons that include one or more of these flags will be
Index: Source/DetourNavMeshBuilder.cpp
===================================================================
--- Source/DetourNavMeshBuilder.cpp	(revision 338)
+++ Source/DetourNavMeshBuilder.cpp	(working copy)
@@ -604,7 +604,7 @@
 	{
 		return false;
 	}
-		
+
 	dtSwapEndian(&header->magic);
 	dtSwapEndian(&header->version);
 	dtSwapEndian(&header->x);
Index: Source/DetourNavMeshQuery.cpp
===================================================================
--- Source/DetourNavMeshQuery.cpp	(revision 338)
+++ Source/DetourNavMeshQuery.cpp	(working copy)
@@ -68,6 +68,10 @@
 		m_areaCost[i] = 1.0f;
 }
 
+dtQueryFilter::~dtQueryFilter()
+{
+}
+
 #ifdef DT_VIRTUAL_QUERYFILTER
 bool dtQueryFilter::passFilter(const dtPolyRef /*ref*/,
 							   const dtMeshTile* /*tile*/,
@@ -99,7 +103,7 @@
 	return dtVdist(pa, pb) * m_areaCost[curPoly->getArea()];
 }
 #endif	
-	
+
 static const float H_SCALE = 0.999f; // Search heuristic scale.
 
 
